import java.lang.*;               
import java.text.ParseException;               
import java.util.*;       
import java.math.BigDecimal;       
      
class putstring{    
    public static String[] intput(String s){    
        String[] tokens= new String [s.length()];    
        int count=0;;    
        StringTokenizer token = new StringTokenizer(s, "+-*/()%",true);    
        while(token.hasMoreTokens()){               
            tokens[count]=token.nextToken();               
            count++;               
        }    
        return tokens;    
    }    
    public static String[] turnpostifx(String s){    
        String [] a=putstring.intput(s);    
        String[] postfix=new String [a.length];    
        Stack<Integer> record = new Stack<Integer>();    
        Stack<String> st = new Stack<String>();                
        String temp=new String("");    
        int count=0;           
        int isp,icp;                        
        for(int i=0;i<a.length;i++){     
            if(a[i]==null){    
                break;    
            }          
            if(record.empty()){           
                isp=0;           
            }        
            else{           
                isp=Integer.parseInt(String.valueOf(record.peek()));           
            }           
            if(a[i].equals(")")){           
                while(!st.peek().equals("(")){           
                    temp=String.valueOf(st.pop());           
                    record.pop();           
                    //System.out.printf("%s ",temp);  //    
                    postfix[count]=temp;    
                    count++;    
                }           
                if(st.peek().equals("(")){           
                    st.pop();           
                    record.pop();           
                }           
            }           
            else if(a[i].equals("(")){           
                st.push(a[i]);           
                record.push(1);           
            }           
            else if(a[i].equals("*") || a[i].equals("/") || a[i].equals("%")){           
                icp=3;           
                while(isp>=icp){           
                    temp=String.valueOf(st.pop());      
                    record.pop();            
                    postfix[count]=temp;    
                    count++;           
                    if(!record.empty()){           
                        isp=Integer.parseInt(String.valueOf(record.peek()));           
                    }        
                    else{           
                        isp=0;           
                    }           
                }           
                if(isp<icp){           
                    st.push(a[i]);           
                    record.push(icp);           
                }           
            }           
            else if(a[i].equals("+") || a[i].equals("-")){           
                icp=2;           
                while(isp>=icp){           
                    temp=String.valueOf(st.pop());       
                    record.pop();      
                    postfix[count]=temp;    
                    count++;           
                    if(!record.empty()){           
                        isp=Integer.parseInt(String.valueOf(record.peek()));           
                    }        
                    else{           
                        isp=0;           
                    }           
                }           
                if(isp<icp){           
                    st.push(a[i]);           
                    record.push(icp);           
                }           
            }      
            else{  
                temp=a[i];    
                postfix[count]=temp;    
                count++;         
            }    
        }    
        while(!st.empty()){    
            temp=String.valueOf(st.pop());   
            postfix[count]=temp;    
            count++;           
        }                
        return postfix;           
    }        
    public static BigDecimal ans(String s){    
        Stack <BigDecimal> bd = new Stack<BigDecimal>();    
        BigDecimal bdtemp;    
        BigDecimal bd1;    
        BigDecimal bd2;    
        BigDecimal bdans=new BigDecimal("0");  
        String exp;    
        String [] b=putstring.turnpostifx(s);    
        for(int i=0;i<b.length;i++){    
            if(b[i]==null){    
                break;    
            }      
            if(b[i].equals("*") || b[i].equals("/") || b[i].equals("%") || b[i].equals("+") || b[i].equals("-")){    
                exp=b[i];  
                bd2=bd.pop();    
                bd1=bd.pop();    
                bdans=putstring.compute(exp,bd1,bd2);  
                bd.push(bdans);  
            }    
            else{    
                bdtemp=new BigDecimal(b[i]);    
                bd.push(bdtemp);  
            }    
        }  
        return bdans;    
    }  
    public static BigDecimal compute(String exp,BigDecimal bd1,BigDecimal bd2){        
        switch(exp){        
            case "+":        
                bd1 = bd1.add(bd2);        
                break;        
            case "-":        
                bd1 = bd1.subtract(bd2);        
                break;        
            case "*":        
                bd1 = bd1.multiply(bd2);        
                break;        
            case "/":        
                bd1 = bd1.divide(bd2);        
                break;        
            case "%":        
                bd1 = bd1.remainder(bd2);        
                break;        
        }        
        return bd1;        
    }  
}    
public class Main{      
    public static void main(String[] args){               
        String s;               
        Scanner sc = new Scanner(System.in);                  
        s=sc.nextLine();  
        BigDecimal ansbd= putstring.ans(s);    
        System.out.printf("%.2f\n",ansbd);        
    }                 
}
